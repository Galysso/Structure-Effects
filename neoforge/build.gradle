plugins {
    id 'com.gradleup.shadow'
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        display_name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
    maven { url = "https://thedarkcolour.github.io/KotlinForForge/" }
}

dependencies {
    /* NeoForge loader */
    neoForge "net.neoforged:neoforge:$rootProject.ext.VERS.neoforge_version"

    /* Common remapping */
    common(project(path: ':common', configuration: 'namedElements')) { transitive = false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')

    /* Project dependencies */
    // Kotlin for Forge (without neoforge loader)
    modRuntimeOnly("thedarkcolour:kfflang-neoforge:${rootProject.ext.VERS.neoforge_kotlin_version}") {
        exclude group: "net.neoforged.fancymodloader", module: "loader"
    }
    modRuntimeOnly("thedarkcolour:kotlinforforge-neoforge:${rootProject.ext.VERS.neoforge_kotlin_version}") {
        exclude group: "net.neoforged.fancymodloader", module: "loader"
    }
    forgeRuntimeLibrary("org.jetbrains.kotlin:kotlin-stdlib:${rootProject.ext.VERS.neoforge_kotlin_libs}")
    forgeRuntimeLibrary("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${rootProject.ext.VERS.neoforge_kotlin_libs}")
    forgeRuntimeLibrary("org.jetbrains.kotlin:kotlin-reflect:${rootProject.ext.VERS.neoforge_kotlin_libs}")
    /*configurations.all {
        resolutionStrategy.eachDependency { d ->
            if (d.requested.group == "thedarkcolour" &&
                    (d.requested.name == "kfflang-neoforge" || d.requested.name == "kotlinforforge-neoforge")) {
                d.useVersion("5.10.0")
            }
        }
    }*/

    forgeRuntimeLibrary "blue.endless:jankson:1.2.3"

    // Fzzy Config (without kotlin for forge because it somehow duplicates neoforge loader dependency)
    modRuntimeOnly("me.fzzyhmstrs:fzzy_config:${rootProject.ext.VERS.neoforge_fzzy_config_version}") {
        exclude group: "thedarkcolour", module: "kotlinforforge-neoforge"
        exclude group: "thedarkcolour", module: "kfflang-neoforge"
    }
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/neoforge.mods.toml') {
        expand version: inputs.properties.version
    }
}

def cats = ["packet_distribution"]
sourceSets {
    main {
        java {
            srcDir "src/main/java"
            // Minecraft version specific sources
            cats.each { cat ->
                def best = pickBest(project, "src/compat/${cat}")
                if (best && new File(best, "java").exists()) {
                    println ">> Compat ${cat}: using ${best}/java"
                    srcDir "${best}/java"
                }
            }
        }
        resources {
            srcDir "src/main/resources"
            srcDir project.file('common/src/main/resources')
        }
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
}
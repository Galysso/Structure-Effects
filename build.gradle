plugins {
    id 'dev.architectury.loom' apply false
    id 'architectury-plugin'
    id 'com.gradleup.shadow' apply false
}

architectury {
    minecraft = gradle.properties
}

allprojects {
    group = project.maven_group
    version = project.mod_version
}

// Integration
// Function that converts a minecraft version string into a comparable integer
def vnum = { String v ->
    def p = v.tokenize('.').collect { it as int }
    (p[0]*1_000_000) + ((p.size()>1?p[1]:0)*1_000) + (p.size()>2?p[2]:0)
}

// Target minecraft version as a comparable integer
def target = vnum(project.minecraft_version)

ext {
    INTEGRATION = new Properties()

    // Picks the best matching directory for the given base path and target version
    pickBest = { Project prj, String rel ->
        def root = prj.file(rel)              // <- relatif AU MODULE appelant
        if (!root.exists()) return null
        def cands = root.listFiles()?.findAll { it.isDirectory() && it.name.startsWith('mc-') } ?: []
        cands
            .collect { [dir: it, num: vnum((it.name - 'mc-') as String)] }
            .findAll { it.num <= target }
            .max { it.num as long }?.dir
    }
}

subprojects {
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'architectury-plugin'
    apply plugin: 'maven-publish'

    /*base {
        archivesName = "$project.archives_base_name-$project.name"
    }*/

    tasks.named('jar') {
        archiveBaseName = "$project.archives_base_name"
        archiveAppendix = "mc${minecraft_version}"
        archiveVersion = "$project.mod_version"
        archiveClassifier = "$project.name"
    }

    repositories {
        maven { url = "https://maven.fzzyhmstrs.me/" }
        maven { url = "https://api.modrinth.com/maven" }
    }

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:$project.minecraft_version"
        mappings loom.officialMojangMappings()
    }

    java {
        withSourcesJar()

        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21

        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 21
    }

    tasks.withType(JavaExec).configureEach {
        javaLauncher.set(
            javaToolchains.launcherFor { languageVersion = JavaLanguageVersion.of(21) }
        )
    }

    pluginManager.withPlugin("java") {
        tasks.named('processResources') {
            from(project.file('common/src/main/resources'))
            def P = [
                author : findProperty("author"),
                mod_version      : findProperty("mod_version"),
                mod_id       : findProperty("mod_id"),
                display_name : findProperty("display_name"),
                mod_description  : findProperty("mod_description"),
                license      : findProperty("license"),
                homepage     : findProperty("homepage"),
                sources      : findProperty("sources"),
                icon_location : findProperty("icon_location"),
                fabric_loader_version : findProperty("fabric_loader_version"),
                minecraft_version : findProperty("minecraft_version"),
                java_version : findProperty("java_version"),
                loader_version : findProperty("loader_version"),
                neoforge_version : rootProject.ext.VERS.neoforge_version
            ]

            inputs.properties(P)
            filesMatching("fabric.mod.json") {expand(P)}
            filesMatching("META-INF/neoforge.mods.toml") {expand(P)}

            exclude '**/*.png'
            filteringCharset = 'UTF-8'
            duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        }
    }

    // Integration definitions
    ext.set('INTEGRATION', rootProject.ext.INTEGRATION)
    ext.set('pickBest', rootProject.ext.pickBest)

    // Configure Maven publishing.
    /*publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = base.archivesName.get()
                from components.java
            }
        }

        // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
        repositories {
            // Add repositories to publish to here.
            // Notice: This block does NOT have the same function as the block in the top level.
            // The repositories here will be used for publishing your artifact, not for
            // retrieving dependencies.
        }
    }*/
}
plugins {
    id 'com.gradleup.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    shadowBundle {
        canBeResolved = true;
        canBeConsumed = false
    }
}

dependencies {
    /* Mappings */
    //mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

    /* Fabric loader */
    modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"

    /* Fabric API */
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    /* Common remapping */
    common(project(path: ':common', configuration: 'namedElements')) { transitive = false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')


    //add("common",        project(path: ":common", configuration: "namedElements"))
    //add("shadowBundle",  project(path: ":common", configuration: "transformProductionFabric"))
    //implementation project(":modules:common")
    /*implementation(project(":modules:common")) {
        targetConfiguration = "namedElements"
    }*/
    /*runtimeOnly(project(":modules:common")) {
        targetConfiguration = "namedElements"
    }*/
    //implementation(project(path: ":common", configuration: "namedElements"))

    /* Project dependencies */
    modImplementation "me.fzzyhmstrs:fzzy_config:${project.fabric_fzzy_config_version}"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = "dev-shadow"
}

remapJar {
    inputFile.set shadowJar.archiveFile
}
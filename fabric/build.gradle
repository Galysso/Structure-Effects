plugins {
    id 'com.gradleup.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    shadowBundle {
        canBeResolved = true;
        canBeConsumed = false
    }
}

dependencies {
    /* Fabric loader */
    modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"

    /* Fabric API */
    modImplementation "net.fabricmc.fabric-api:fabric-api:${rootProject.ext.VERS.fabric_version}"

    /* Common remapping */
    common(project(path: ':common', configuration: 'namedElements')) { transitive = false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')

    /* Project dependencies */
    modRuntimeOnly "me.fzzyhmstrs:fzzy_config:${rootProject.ext.VERS.fabric_fzzy_config_version}"

    // integrations
    if (rootProject.ext.VERS.containsKey('wraith_waystones_version')) {
        modCompileOnly "maven.modrinth:fwaystones:${rootProject.ext.VERS.wraith_waystones_version}"
        modRuntimeOnly "maven.modrinth:fwaystones:${rootProject.ext.VERS.wraith_waystones_version}"
    }
}

sourceSets {
    main {
        resources {
            srcDir "src/main/resources"
            srcDir project.file('common/src/main/resources')
        }

        if (rootProject.ext.VERS.containsKey('wraith_waystones_version')) {
            def best = pickBest(project, "src/integration/wraith_waystones")
            if (best && new File(best, "java").exists()) {
                java {
                    println ">> Integration wraith_waystones: using ${best}/java"
                    srcDir "${best}/java"
                }
                resources {
                    srcDir "${best}/resources"
                }
            }
        } else {
            resources {
                srcDir "src/integration/default/resources/wraith_waystones"
            }
        }
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = "dev-shadow"
}

remapJar {
    inputFile.set shadowJar.archiveFile
}
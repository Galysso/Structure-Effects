architectury {
    common project.findProperty("enabled_platforms").toString().split(',')
}

repositories {
    maven { url = "https://repo.spongepowered.org/repository/maven-public/" } // <- Sponge
}

dependencies {
    //modImplementation "net.fabricmc:fabric-loader:$project.fabric_loader_version"

    modCompileOnly "me.fzzyhmstrs:fzzy_config:${rootProject.ext.VERS.fabric_fzzy_config_version}"

    compileOnly "org.spongepowered:mixin:${project.mixin_version}"
    annotationProcessor "org.spongepowered:mixin:${project.mixin_version}:processor"
}


// TODO: Consider source categories in order to prevent useless and numerous code duplication
// TODO: Split shims into separate files to separate the logics in a more elegant way

// Function that converts a minecraft version string into a comparable integer
def vnum = { String v ->
    def p = v.tokenize('.').collect { it as int }
    (p[0]*1_000_000) + ((p.size()>1?p[1]:0)*1_000) + (p.size()>2?p[2]:0)
}
def target = vnum(project.minecraft_version)

// Search for the best matching 'mc-<version>' directory in 'src'
/*def candidates = file('src').listFiles()?.findAll { it.isDirectory() && it.name.startsWith('mc-') } ?: []
def best = candidates
        .collect { [dir: it, num: vnum(it.name - 'mc-')] }
        .findAll { it.num <= target }
        .max { it.num as long }   // null si aucun â‰¤ target
*/

def pickBest = { base ->
    def root = file(base)
    if (!root.exists()) return null
    def cands = root.listFiles()?.findAll{ it.isDirectory() && it.name.startsWith('mc-') } ?: []
    cands.collect{ [dir: it, num: vnum(it.name - 'mc-')] }
            .findAll{ it.num <= target }
            .max{ it.num as long }?.dir
}

def cats = ["nbt", "registry", "saved_data", "server_player"]

// Adds the found directory to the source sets, if any
sourceSets {
    main {
        java {
            srcDir "src/main/java"
            println "Searching compatilibity sources for MC ${project.minecraft_version}..."
            cats.each { cat ->
                def best = pickBest("src/compat/${cat}")
                if (best && new File(best, "java").exists()) {
                    println ">> Compat ${cat}: using ${best}/java"
                    srcDir "${best}/java"
                }
            }
        }
    }
}